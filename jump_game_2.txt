// class Solution {
// public:
//     int jump(vector<int>& nums) {
//         int min,count;
//         unordered_map<int,int> umap;
//         for(int i=nums.size()-2;i>=0;i--){
//             min=10000;
//             count=nums[i];
//             if(count==0)
//                 continue;
//             for(int j=1;j<=count;j++){
//                 if((i+j)==nums.size()-1){
//                     min=1;
//                     break;
//                 }
//                 else{
//                     if(umap.find(i+j)!=umap.end()){
//                         if(min>umap[i+j]+1)
//                             min=umap[i+j]+1;
//                     }
//                 }
//             }
//             umap[i]=min;
//         }
//         return umap[0];
//     }
// }; not the optimal solution Time complexity is O(n*count);

class Solution {
public:
    int jump(vector<int>& nums) {
        int i=0,j=0,max_dis=0,steps=0;
        while(max_dis<nums.size()-1){
            while(i<=j){
                max_dis=max(i+nums[i],max_dis);
                i++;
            }
            steps++;
            j=max_dis;
        }
        return steps;
    }
};